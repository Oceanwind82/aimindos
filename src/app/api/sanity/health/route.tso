import { NextResponse } from "next/server";
import { createClient } from "@sanity/client";

const projectId = process.env.SANITY_PROJECT_ID;
const dataset = process.env.SANITY_DATASET;
const token = process.env.SANITY_API_TOKEN; // optional for public/published reads

const sanity = createClient({
  projectId,
  dataset,
  token,
  apiVersion: "2025-08-01", // or pin to a stable date for reproducibility
  useCdn: false,
  perspective: "published",
});

export async function GET() {
  // Validate env early for clearer errors
  if (!projectId || !dataset) {
    return NextResponse.json(
      { ok: false, error: "Missing SANITY_PROJECT_ID or SANITY_DATASET" },
      { status: 500 }
    );
  }

  try {
    // Tiny, safe sample query: fetch the first doc's id/type/updatedAt (any type)
    const sample = await sanity.fetch(
      `*[_type defined][0]{_id, _type, _updatedAt}`
    );

    // Also useful: how many docs exist (fast count)
    const docCount = await sanity.fetch<number>(`count(*[])`);

    return NextResponse.json({
      ok: true,
      projectId,
      dataset,
      docCount,
      sample: sample ?? null,
      timestamp: new Date().toISOString(),
    });
  } catch (e: unknown) {
    const msg = e instanceof Error ? e.message : String(e);
    return NextResponse.json({ ok: false, error: msg }, { status: 500 });
  }
}

